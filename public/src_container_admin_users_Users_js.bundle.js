/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwsfs"] = self["webpackChunkwsfs"] || []).push([["src_container_admin_users_Users_js"],{

/***/ "./src/container/admin/users/Users.js":
/*!********************************************!*\
  !*** ./src/container/admin/users/Users.js ***!
  \********************************************/
/***/ (() => {

eval("// /* eslint-disable require-jsdoc */\n// import React, { Component } from 'react';\n// import Button from '@material-ui/core/Button';\n// import axios from 'axios';\n// import MUIDataTable from 'mui-datatables';\n// import GetAppIcon from '@material-ui/icons/GetApp';\n// import VisibilityIcon from '@material-ui/icons/Visibility';\n// import { NavLink } from 'react-router-dom';\n// import DescriptionIcon from '@material-ui/icons/Description';\n// import noMatch from '../../../images/noMatch.png';\n// import PopupState, { bindTrigger, bindMenu } from 'material-ui-popup-state';\n// import ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n// import FileCopyIcon from '@material-ui/icons/FileCopy';\n// import CloseIcon from '@material-ui/icons/Close';\n// import Menu from '@material-ui/core/Menu';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import MoreVertIcon from '@material-ui/icons/MoreVert';\n// import DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\n// import ListAltIcon from '@material-ui/icons/ListAlt';\n// import UserHeader from '../../../components/header/UserHeader';\n// import { customStyles, customStylesauto } from '../../../components/customscripts/customscript';\n// import ReactModal from 'react-modal';\n// import { withSnackbar } from 'notistack';\n// import moment from 'moment';\n// import ItemDetails from './Details';\n// import { UserList } from '../../../components/StaticData';\n// import TextField from '@material-ui/core/TextField';\n\n// // import { getAllUser } from '../../../servies/services';\n// import LinearLoader from '../../../components/loader/LinearLoader';\n// import Loader from '../../../components/loader';\n\n// import HighlightOffIcon from '@material-ui/icons/HighlightOff';\n// import CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\n// import Tooltip from '@material-ui/core/Tooltip';\n\n// class Users extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       token: sessionStorage.getItem('token'),\n//       peers: JSON.parse(sessionStorage.getItem('peers')),\n//       userid: sessionStorage.getItem(\"userid\"),\n//       loading: true,\n//       getLoansLoader: false,\n//       open: false,\n//       message: '',\n//       table_data: [],\n//       ApproveStatus: '',\n//       OrgName: '',\n//       status: ''\n//     };\n//   }\n\n//   // async componentDidMount() {\n//   //   this.setState({ loading: true });\n//   //   const data = { 'token': this.state.token };\n//   // }\n\n//   async selectedpoolid(selected) {\n//     const arr = []\n//     for (var i = 0; i < selected.length; i++) {\n//       var j = selected[i];\n//       let PoolID = this.state.table_data[j].UserID;\n//       arr.push(PoolID);\n//     }\n//     console.log(\"selected Loans\", arr);\n//     sessionStorage.setItem(\"user_list\", JSON.stringify(arr));\n//   }\n\n//   approveUserAction = async (UserID, UserName, ApproveStatus, ChannelName) => {\n//     const data =\n//     {\n//       \"UserName\": UserName,\n//       \"OrgName\": this.state.OrgName,\n//       \"token\": this.state.token,\n//       \"peers\": this.state.peers,\n//       \"UserID\": UserID,\n//       \"ApproveStatus\": ApproveStatus,\n//       \"channelname\": ChannelName,\n\n//     }\n\n//     const APIResponse = await approveUser(data)\n//     console.log(\"approveUser\", APIResponse)\n\n//     if (APIResponse.data.success == \"true\") {\n//       const message = \"Submitted Successfully\";\n//       this.props.enqueueSnackbar(message, {\n//         variant: 'info',\n//         autoHideDuration: 2000,\n//       });\n\n//     } else {\n//       const message = \"Not saved\";\n//       this.props.enqueueSnackbar(message, {\n//         variant: 'error',\n//         autoHideDuration: 2000,\n//       });\n//     }\n\n//     // this.setState({ OrgName: orgname, status: status })\n\n//     const orgname = this.state.OrgName\n//     const status = this.state.status\n//     this.filterMethod(orgname, status)\n\n//   }\n\n//   onOpenModal1(value) {\n//     console.log(\"MODAL \" + value);\n//     this.setState({ open1: true, value: value });\n//   };\n\n//   onCloseModal1 = () => {\n//     this.setState({ open1: false, loadingmodal: false });\n//   };\n\n//   async componentDidMount() {\n\n//     console.log(\"this.props.match.params.orgname\", this.props.match.params.orgname)\n//     console.log(\"this.props.match.params.status\", this.props.match.params.status)\n//     const orgname = this.props.match.params.orgname;\n//     const status = this.props.match.params.status;\n//     this.setState({ OrgName: orgname, status: status })\n//     this.filterMethod(orgname, status)\n\n//   }\n\n//   componentWillReceiveProps(nextProps) {\n\n//     console.log(\"componentWillReceiveProps.orgname\", nextProps.match.params.orgname)\n//     console.log(\"componentWillReceiveProps.status\", nextProps.match.params.status)\n//     const orgname = nextProps.match.params.orgname;\n//     const status = nextProps.match.params.status;\n//     this.setState({ OrgName: orgname, status: status })\n//     this.setState({\n//       loading: false,\n//       table_data: [],\n//     })\n//     this.filterMethod(orgname, status)\n//   }\n\n//   async filterMethod(orgname, status) {\n\n//     this.setState({ orgname: orgname, ApproveStatus: status });\n\n//     if (orgname !== undefined) {\n\n//       if (status !== \"Approved\") {\n\n//         const APIResponse = await getAllUsers(orgname)\n//         console.log(\"getAllUsers\", getAllUsers)\n//         const orgname_details = APIResponse.data.filter(item => item.OrgName == orgname)\n//         console.log(\"orgname_details\", orgname_details)\n//         const users = APIResponse.data.filter(item => item.ApproveStatus !== \"Approved\")\n//         console.log(\"users\", users)\n//         this.setState({ loading: false, table_data: users })\n//       } else {\n\n//         const APIResponse = await getAllUsers(orgname)\n//         console.log(\"getAllUsers\", getAllUsers)\n//         const orgname_details = APIResponse.data.filter(item => item.OrgName == orgname)\n//         console.log(\"orgname_details\", orgname_details)\n//         const users = APIResponse.data.filter(item => item.ApproveStatus == status)\n//         console.log(\"users\", users)\n//         this.setState({ loading: false, table_data: users })\n\n//       }\n\n//     } else {\n//       // this.setState({ formAction: \"add\", pageTitle: \"Create a Invoice\" })\n//       const APIResponse = await getAllUsers(orgname)\n//       console.log(\"getAllUsers\", getAllUsers)\n\n//       const orgname_details = APIResponse.data.filter(item => item.OrgName == orgname)\n//       console.log(\"orgname_details\", orgname_details)\n//       const users = orgname_details.filter(item => item.ApproveStatus == status)\n//       console.log(\"users\", users)\n//       this.setState({ loading: false, table_data: users })\n\n//     }\n//   }\n\n//   onCloseModal1 = () => {\n//     this.setState({ open1: false, loadingmodal: false });\n//   };\n\n//   render() {\n\n//     const options = {\n//       responsive: 'stacked',\n//       fixedHeader: true,\n//       fixedSelectColumn: true,\n//       tableBodyHeight: '580px',\n//       filterType: 'dropdown',\n//       search: true,\n//       print: true,\n//       viewColumns: true,\n//       download: true,\n//       rowHover: false,\n//       selectableRowsOnClick: false,\n//       selectableRows: false,\n//       // onRowClick: this.onRowClick,\n//       onRowsSelect: this.onRowsSelect,\n//       rowsSelected: this.state.rowsSelected,\n//       onRowsSelect: (rowsSelected, allRows) => {\n//         console.log(\"allRows\", allRows);\n//         console.log(\"rowsSelected\", rowsSelected);\n//         this.setState({ rowsSelected: allRows.map(row => row.dataIndex) });\n//         const selected = allRows.map(row => row.dataIndex);\n//         console.log(\"selected\" + selected);\n//         this.selectedpoolid(selected);\n//       },\n\n//       searchText: this.state.searchText,\n//       searchPlaceholder: 'Search Users',\n//       customSearch: (searchQuery, currentRow, columns) => {\n//         let isFound = false;\n//         currentRow.forEach(col => {\n//           if (col.toString().indexOf(searchQuery) >= 0) {\n//             isFound = true;\n//           }\n//         });\n//         return isFound;\n//       },\n\n//       loading: false,\n//       textLabels: {\n//         body: {\n//           noMatch: this.state.loading === false ?\n//             'Sorry, there is no matching data to display' :\n//             <Loader msg={\"Please wait, loading data\"} />,\n//           toolTip: 'Sort',\n//           columnHeaderTooltip: (column) => `Sort for ${column.label}`,\n//         },\n//         filter: {\n//           all: 'All',\n//           title: 'FILTERS',\n//           reset: 'RESET',\n//         },\n\n//         selectedRows: {\n//           text: 'row(s) selected',\n//           delete: 'Delete',\n//           deleteAria: 'Delete Selected Rows',\n//         },\n//       },\n//     };\n\n//     const columns = [\n//       {\n//         name: 'UserID',\n//         label: 'User Id',\n//         options: {\n//           filter: false,\n//           sort: true,\n//           customBodyRender: (value, tableMeta) => (\n//             <div>\n//               <React.Fragment>\n//                 <Tooltip title={value+\"123\"} aria-label=\"add\">\n//                   <React.Fragment>\n//                     {value.slice(0, 7) + \"...\"}\n//                   </React.Fragment>\n//                 </Tooltip>\n//               </React.Fragment>\n//             </div>\n//           ),\n//         },\n//       },\n//       {\n//         name: 'UserName',\n//         label: 'User Name',\n//         options: {\n//           filter: true,\n//           sort: true,\n//         },\n//       },\n//       {\n//         name: 'FirstName',\n//         label: 'First Name',\n//         options: {\n//           filter: true,\n//           sort: true,\n//         },\n//       },\n//       {\n//         name: 'LastName',\n//         label: 'Last Name',\n//         options: {\n//           filter: true,\n//           sort: true,\n//         },\n//       },\n//       {\n//         name: 'EmailID',\n//         label: 'Email Id',\n//         options: {\n//           filter: true,\n//           sort: true,\n//         },\n//       },\n\n//       {\n//         name: 'OrgName',\n//         label: 'Org Name',\n//         options: {\n//           filter: false,\n//           sort: false\n//         },\n//       },\n\n//       {\n//         name: 'ChannelName',\n//         label: 'Channel Name',\n//         options: {\n//           filter: false,\n//           sort: false\n//         },\n//       },\n\n//       {\n//         name: 'MobileNumber',\n//         label: 'Mobile Number',\n//         options: {\n//           filter: false,\n//           sort: false\n//         },\n//       },\n//       {\n//         name: 'ApproveStatus',\n//         label: 'Status',\n//         options: {\n//           filter: false,\n//           sort: false,\n//           customBodyRender: (value, tableMeta) => (\n//             <div style={{ position: 'relative' }}>\n//               <React.Fragment>\n//                 {value}\n//               </React.Fragment> </div>\n//           ),\n//         }\n//       },\n//       {\n//         name: 'ApproveStatus',\n//         label: 'Action',\n//         options: {\n//           filter: false,\n//           sort: false,\n//           customBodyRender: (value, tableMeta) => (\n//             <div className=\"action_cell\" style={{ position: 'relative' }}>\n\n//               <React.Fragment>\n//                 {value == \"Approved\" ?\n//                   <Tooltip title={\"Reject User\"} aria-label=\"Reject User\">\n//                     <Button variant=\"outlined\" color=\"primary\" disabled={tableMeta.rowData[1] == \"admin\" ? true : false} onClick={() => { this.approveUserAction(tableMeta.rowData[0], tableMeta.rowData[1], \"Rejected\",  tableMeta.rowData[6],); }}>\n//                       <HighlightOffIcon></HighlightOffIcon>\n//                     </Button>\n//                   </Tooltip>\n//                   : ''}\n\n//                 {value == \"Pending\" ?\n//                   <React.Fragment>\n//                     <Tooltip title={\"Approve User\"} aria-label=\"Approve User\">\n//                       <Button variant=\"outlined\" color=\"primary\" onClick={() => { this.approveUserAction(tableMeta.rowData[0], tableMeta.rowData[1], \"Approved\",  tableMeta.rowData[6],); }}>\n//                         <CheckCircleOutlineIcon></CheckCircleOutlineIcon>\n//                       </Button>\n//                     </Tooltip>\n\n//                     <Tooltip title={\"Reject User\"} aria-label=\"Reject User\">\n//                       <Button variant=\"outlined\" color=\"primary\" disabled={tableMeta.rowData[1] == \"admin\" ? true : false} onClick={() => { this.approveUserAction(tableMeta.rowData[0], tableMeta.rowData[1], \"Rejected\",  tableMeta.rowData[6],); }}>\n//                         <HighlightOffIcon></HighlightOffIcon>\n//                       </Button>\n//                     </Tooltip>\n//                   </React.Fragment>\n//                   : ''}\n\n//                 {value == \"Rejected\" ?\n//                   <Tooltip title={\"Approve User\"} aria-label=\"Approve User\">\n//                     <Button variant=\"outlined\" color=\"primary\" onClick={() => { this.approveUserAction(tableMeta.rowData[0], tableMeta.rowData[1], \"Approved\",  tableMeta.rowData[6]); }}>\n//                       <CheckCircleOutlineIcon></CheckCircleOutlineIcon>\n//                     </Button>\n//                   </Tooltip>\n//                   : ''}\n\n//               </React.Fragment>\n\n//             </div>\n//           ),\n//         }\n//       }\n//     ];\n\n//     return (\n//       <React.Fragment>\n//         <div className=\"page\">\n//           <div className=\"content\">\n//             {/* {JSON.stringify(this.state.OrgName)} */}\n//             <div className=\"header\"><UserHeader status={this.state.ApproveStatus} OrgName={this.state.orgname} pageTitle={this.state.status + ' Users'}></UserHeader></div>\n\n//             {/* <div className=\"tableSearch\">\n//               <div className=\"row justify-content-left\">\n//                 <div className=\"col-md-4 col-sm-12\">\n//                   <div className=\"\" id=\"searchBox\"><TextField id=\"outlined-basic\" label=\"Search for Users Name\" variant=\"outlined\" size=\"small\" /></div>\n//                 </div>\n//                 <div className=\"col-md-6 col-sm-12\">\n//                 </div>\n//               </div>\n//             </div> */}\n\n//             <div className=\"page-content\">\n//               {/* {JSON.stringify(this.state)} */}\n//               <MUIDataTable\n//                 title={this.state.status + ' Users'}\n//                 data={this.state.table_data}\n//                 columns={columns}\n//                 options={options}\n//               />\n//             </div>\n//           </div>\n//         </div>\n\n//         <ReactModal\n//           isOpen={this.state.open1}\n//           contentLabel=\"Minimal Modal Example\"\n//           style={customStyles}\n//           onRequestClose={this.onCloseModal1}\n//         >\n//           <React.Fragment>\n//             <div className=\"modalPopup\">\n//               <h2>User Details</h2>\n//               <Button className=\"closePopup\" style={{ minWidth: '30px' }} variant=\"text\" color=\"primary\" onClick={this.onCloseModal1}> <CloseIcon></CloseIcon> </Button>\n//               <div>\n//                 <ItemDetails dataFromParent={this.state.value} />\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         </ReactModal>\n\n//       </React.Fragment>\n//     );\n//   }\n// }\n\n// export default withSnackbar(Users);\n\n//# sourceURL=webpack://wsfs/./src/container/admin/users/Users.js?");

/***/ })

}]);