// lib/pad.js
function pad2(value) {
  return value > 9 ? `${value}` : `0${value}`;
}
function pad3(value) {
  return value > 99 ? `${value}` : value > 9 ? `0${value}` : `00${value}`;
}

// lib/generate.js
function generateBuildNumber(options) {
  let build = getBuildStamp();
  options || (options = {});
  if (typeof options === "string") {
    options = {version: options};
  }
  const version = options.version;
  if (version) {
    const versionSeparator = options.versionSeparator || ".";
    build = version.trim() + versionSeparator.trim() + build;
  }
  return build;
}
function getBuildStamp() {
  const now = new Date();
  const year = now.getFullYear() % 100;
  const month = now.getMonth() + 1;
  const day = now.getDate();
  const counter = parseInt((now.getHours() * 60 + now.getMinutes()) / 2);
  return `${pad2(year)}${pad2(month)}${pad2(day)}${pad3(counter)}`;
}
var generate_default = generateBuildNumber;

// lib/split.js
function splitBuildNumber(build) {
  const parts = /(\d{2})(\d{2})(\d{2})(\d{3})$/.exec(build.trim());
  if (!parts) {
    throw new Error('Build number has to end with "YYMMDDCCC".');
  }
  const year = +parts[1];
  const month = +parts[2];
  const day = +parts[3];
  const counter = +parts[4];
  if (!(year >= 0 && month >= 1 && month <= 12 && day >= 1 && day <= 31)) {
    throw new Error("Build number has to contain numbers formatting a date.");
  }
  return {year, month, day, counter};
}
var split_default = splitBuildNumber;

// lib/validate.js
function validateBuildNumber(build) {
  try {
    split_default(build);
    return true;
  } catch (error) {
    return false;
  }
}
var validate_default = validateBuildNumber;

// lib/parse.js
function parseBuildTime(build) {
  let {year, month, day, counter} = split_default(build);
  year += 2e3;
  month -= 1;
  counter *= 2;
  const hours = parseInt(counter / 60);
  const minutes = parseInt(counter % 60);
  return new Date(year, month, day, hours, minutes);
}
var parse_default = parseBuildTime;

// lib/format.js
function formatBuildTime(date) {
  if (typeof date === "string") {
    date = parse_default(date);
  }
  const datePart = date.toDateString();
  const hours = date.getHours();
  const minutes = date.getMinutes();
  return `${datePart} ${pad2(hours)}:${pad2(minutes)}`;
}
var format_default = formatBuildTime;
export {
  format_default as format,
  generate_default as generate,
  parse_default as parse,
  validate_default as validate
};
//# sourceMappingURL=index.mjs.map
