{
  "version": 3,
  "sources": ["../lib/pad.js", "../lib/generate.js", "../lib/split.js", "../lib/validate.js", "../lib/parse.js", "../lib/format.js"],
  "sourcesContent": ["function pad2 (value) {\n  return value > 9 ? `${value}` : `0${value}`\n}\n\nfunction pad3 (value) {\n  return value > 99 ? `${value}` : value > 9 ? `0${value}` : `00${value}`\n}\n\nexport { pad2, pad3 }\n", "import { pad2, pad3 } from './pad'\n\nfunction generateBuildNumber (options) {\n  let build = getBuildStamp()\n\n  options || (options = {})\n  if (typeof options === 'string') {\n    options = { version: options }\n  }\n  const version = options.version\n  if (version) {\n    const versionSeparator = options.versionSeparator || '.'\n    build = version.trim() + versionSeparator.trim() + build\n  }\n\n  return build\n}\n\nfunction getBuildStamp () {\n  const now = new Date()\n  const year = now.getFullYear() % 100\n  const month = now.getMonth() + 1\n  const day = now.getDate()\n  // Count 2-minute intervals elapsed since midnight:(HH * 60 + MM) / 2\n  const counter = parseInt((now.getHours() * 60 + now.getMinutes()) / 2)\n  // Format the stamp as YYMMDDCCC\n  return `${pad2(year)}${pad2(month)}${pad2(day)}${pad3(counter)}`\n}\n\nexport default generateBuildNumber\n", "function splitBuildNumber (build) {\n  const parts = /(\\d{2})(\\d{2})(\\d{2})(\\d{3})$/.exec(build.trim())\n  if (!parts) {\n    throw new Error('Build number has to end with \"YYMMDDCCC\".')\n  }\n\n  const year = +parts[1]\n  const month = +parts[2]\n  const day = +parts[3]\n  const counter = +parts[4]\n  if (!(year >= 0 && month >= 1 && month <= 12 && day >= 1 && day <= 31)) {\n    throw new Error('Build number has to contain numbers formatting a date.')\n  }\n\n  return { year, month, day, counter }\n}\n\nexport default splitBuildNumber\n", "import splitBuildNumber from './split'\n\nfunction validateBuildNumber (build) {\n  try {\n    splitBuildNumber(build)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\nexport default validateBuildNumber\n", "import splitBuildNumber from './split'\n\nfunction parseBuildTime (build) {\n  let { year, month, day, counter } = splitBuildNumber(build)\n\n  // Convert the two-digit year to the full year\n  year += 2000\n  // Prepare the month to be accepted by the Date constructor\n  month -= 1\n  // Convert count of 2-minute intervals to minutes elapsed since midnight\n  counter *= 2\n  const hours = parseInt(counter / 60)\n  const minutes = parseInt(counter % 60)\n\n  return new Date(year, month, day, hours, minutes)\n}\n\nexport default parseBuildTime\n", "import parseBuildTime from './parse'\nimport { pad2 } from './pad'\n\nfunction formatBuildTime (date) {\n  if (typeof date === 'string') {\n    date = parseBuildTime(date)\n  }\n  const datePart = date.toDateString()\n  const hours = date.getHours()\n  const minutes = date.getMinutes()\n  return `${datePart} ${pad2(hours)}:${pad2(minutes)}`\n}\n\nexport default formatBuildTime\n"],
  "mappings": "AAAA,WAAe,GACb,MAAO,GAAQ,EAAI,GAAG,IAAU,IAAI,IAGtC,cACE,MAAO,GAAQ,GAAK,GAAG,IAAU,EAAQ,EAAI,IAAI,IAAU,KAAK,ICHlE,WAA8B,GAC5B,MAAY,IAEZ,GAAY,GAAU,IACtB,AAAI,MAAO,IAAY,UACrB,GAAU,CAAE,QAAS,IAEvB,MAAgB,EAAQ,QACxB,GAAI,GACF,MAAyB,EAAQ,kBAAoB,IACrD,EAAQ,EAAQ,OAAS,EAAiB,OAAS,EAGrD,MAAO,GAGT,aACE,MAAY,GAAI,QACH,EAAI,cAAgB,MACnB,EAAI,WAAa,IACnB,EAAI,YAEA,SAAU,GAAI,WAAa,GAAK,EAAI,cAAgB,GAEpE,MAAO,GAAG,EAAK,KAAQ,EAAK,KAAS,EAAK,KAAO,EAAK,KAGxD,MAAe,EC7Bf,WAA2B,GACzB,MAAc,gCAAgC,KAAK,EAAM,QACzD,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,6CAGlB,MAAa,CAAC,EAAM,KACN,CAAC,EAAM,KACT,CAAC,EAAM,KACH,CAAC,EAAM,GACvB,GAAI,CAAE,IAAQ,GAAK,GAAS,GAAK,GAAS,IAAM,GAAO,GAAK,GAAO,IACjE,KAAM,IAAI,OAAM,0DAGlB,MAAO,CAAE,OAAM,QAAO,MAAK,WAG7B,MAAe,ECff,WAA8B,GAC5B,IACE,SAAiB,GACV,YAEP,MAAO,IAIX,MAAe,ECTf,WAAyB,GACvB,IAAM,OAAM,QAAO,MAAK,WAAY,EAAiB,GAGrD,GAAQ,IAER,GAAS,EAET,GAAW,EACX,MAAc,SAAS,EAAU,MACjB,SAAS,EAAU,IAEnC,MAAO,IAAI,MAAK,EAAM,EAAO,EAAK,EAAO,GAG3C,MAAe,ECdf,WAA0B,GACxB,AAAI,MAAO,IAAS,UAClB,GAAO,EAAe,IAExB,MAAiB,EAAK,iBACR,EAAK,aACH,EAAK,aACrB,MAAO,GAAG,KAAY,EAAK,MAAU,EAAK,KAG5C,MAAe",
  "names": []
}
