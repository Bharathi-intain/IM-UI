{
  "version": 3,
  "sources": ["../lib/index.js", "../lib/pad.js", "../lib/generate.js", "../lib/split.js", "../lib/validate.js", "../lib/parse.js", "../lib/format.js"],
  "sourcesContent": ["import generate from './generate'\nimport validate from './validate'\nimport parse from './parse'\nimport format from './format'\n\nexport { generate, validate, parse, format }\n", "function pad2 (value) {\n  return value > 9 ? `${value}` : `0${value}`\n}\n\nfunction pad3 (value) {\n  return value > 99 ? `${value}` : value > 9 ? `0${value}` : `00${value}`\n}\n\nexport { pad2, pad3 }\n", "import { pad2, pad3 } from './pad'\n\nfunction generateBuildNumber (options) {\n  let build = getBuildStamp()\n\n  options || (options = {})\n  if (typeof options === 'string') {\n    options = { version: options }\n  }\n  const version = options.version\n  if (version) {\n    const versionSeparator = options.versionSeparator || '.'\n    build = version.trim() + versionSeparator.trim() + build\n  }\n\n  return build\n}\n\nfunction getBuildStamp () {\n  const now = new Date()\n  const year = now.getFullYear() % 100\n  const month = now.getMonth() + 1\n  const day = now.getDate()\n  // Count 2-minute intervals elapsed since midnight:(HH * 60 + MM) / 2\n  const counter = parseInt((now.getHours() * 60 + now.getMinutes()) / 2)\n  // Format the stamp as YYMMDDCCC\n  return `${pad2(year)}${pad2(month)}${pad2(day)}${pad3(counter)}`\n}\n\nexport default generateBuildNumber\n", "function splitBuildNumber (build) {\n  const parts = /(\\d{2})(\\d{2})(\\d{2})(\\d{3})$/.exec(build.trim())\n  if (!parts) {\n    throw new Error('Build number has to end with \"YYMMDDCCC\".')\n  }\n\n  const year = +parts[1]\n  const month = +parts[2]\n  const day = +parts[3]\n  const counter = +parts[4]\n  if (!(year >= 0 && month >= 1 && month <= 12 && day >= 1 && day <= 31)) {\n    throw new Error('Build number has to contain numbers formatting a date.')\n  }\n\n  return { year, month, day, counter }\n}\n\nexport default splitBuildNumber\n", "import splitBuildNumber from './split'\n\nfunction validateBuildNumber (build) {\n  try {\n    splitBuildNumber(build)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\nexport default validateBuildNumber\n", "import splitBuildNumber from './split'\n\nfunction parseBuildTime (build) {\n  let { year, month, day, counter } = splitBuildNumber(build)\n\n  // Convert the two-digit year to the full year\n  year += 2000\n  // Prepare the month to be accepted by the Date constructor\n  month -= 1\n  // Convert count of 2-minute intervals to minutes elapsed since midnight\n  counter *= 2\n  const hours = parseInt(counter / 60)\n  const minutes = parseInt(counter % 60)\n\n  return new Date(year, month, day, hours, minutes)\n}\n\nexport default parseBuildTime\n", "import parseBuildTime from './parse'\nimport { pad2 } from './pad'\n\nfunction formatBuildTime (date) {\n  if (typeof date === 'string') {\n    date = parseBuildTime(date)\n  }\n  const datePart = date.toDateString()\n  const hours = date.getHours()\n  const minutes = date.getMinutes()\n  return `${datePart} ${pad2(hours)}:${pad2(minutes)}`\n}\n\nexport default formatBuildTime\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,MAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,gBAAe;AACb,WAAO,QAAQ,IAAI,GAAG,UAAU,IAAI;AAAA;AAGtC;AACE,WAAO,QAAQ,KAAK,GAAG,UAAU,QAAQ,IAAI,IAAI,UAAU,KAAK;AAAA;;;ACHlE,+BAA8B;AAC5B,gBAAY;AAEZ,eAAY,WAAU;AACtB,QAAI,OAAO,YAAY;AACrB,gBAAU,CAAE,SAAS;AAAA;AAEvB,oBAAgB,QAAQ;AACxB,QAAI;AACF,+BAAyB,QAAQ,oBAAoB;AACrD,cAAQ,QAAQ,SAAS,iBAAiB,SAAS;AAAA;AAGrD,WAAO;AAAA;AAGT;AACE,gBAAY,IAAI;AAChB,iBAAa,IAAI,gBAAgB;AACjC,kBAAc,IAAI,aAAa;AAC/B,gBAAY,IAAI;AAEhB,oBAAgB,SAAU,KAAI,aAAa,KAAK,IAAI,gBAAgB;AAEpE,WAAO,GAAG,KAAK,QAAQ,KAAK,SAAS,KAAK,OAAO,KAAK;AAAA;AAGxD,yBAAe;;;AC7Bf,4BAA2B;AACzB,kBAAc,gCAAgC,KAAK,MAAM;AACzD,QAAI,CAAC;AACH,YAAM,IAAI,MAAM;AAAA;AAGlB,iBAAa,CAAC,MAAM;AACpB,kBAAc,CAAC,MAAM;AACrB,gBAAY,CAAC,MAAM;AACnB,oBAAgB,CAAC,MAAM;AACvB,QAAI,CAAE,SAAQ,KAAK,SAAS,KAAK,SAAS,MAAM,OAAO,KAAK,OAAO;AACjE,YAAM,IAAI,MAAM;AAAA;AAGlB,WAAO,CAAE,MAAM,OAAO,KAAK;AAAA;AAG7B,sBAAe;;;ACff,+BAA8B;AAC5B;AACE,oBAAiB;AACjB,aAAO;AAAA;AAEP,aAAO;AAAA;AAAA;AAIX,yBAAe;;;ACTf,0BAAyB;AACvB,SAAM,MAAM,OAAO,KAAK,WAAY,cAAiB;AAGrD,YAAQ;AAER,aAAS;AAET,eAAW;AACX,kBAAc,SAAS,UAAU;AACjC,oBAAgB,SAAS,UAAU;AAEnC,WAAO,IAAI,KAAK,MAAM,OAAO,KAAK,OAAO;AAAA;AAG3C,sBAAe;;;ACdf,2BAA0B;AACxB,QAAI,OAAO,SAAS;AAClB,aAAO,cAAe;AAAA;AAExB,qBAAiB,KAAK;AACtB,kBAAc,KAAK;AACnB,oBAAgB,KAAK;AACrB,WAAO,GAAG,YAAY,KAAK,UAAU,KAAK;AAAA;AAG5C,uBAAe;",
  "names": []
}
